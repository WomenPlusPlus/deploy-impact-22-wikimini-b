export interface ApiResponse {
    query?: Record<string, any>;
    [prop: string]: any;
}
export declare type ApiEditResponse = {
    result: string;
    pageid: number;
    title: string;
    contentmodel: string;
    nochange?: true;
    oldrevid: number;
    newrevid: number;
    newtimestamp: string;
};
export declare type ApiMoveResponse = ApiResponse;
export declare type ApiDeleteResponse = ApiResponse;
export declare type ApiUndeleteResponse = ApiResponse;
export declare type ApiProtectResponse = ApiResponse;
export declare type ApiUploadResponse = ApiResponse;
export declare type ApiRollbackResponse = ApiResponse;
export declare type ApiBlockResponse = ApiResponse;
export declare type ApiUnblockResponse = ApiResponse;
export declare type ApiEmailUserResponse = ApiResponse;
export declare type ApiQueryUsersResponse = ApiResponse;
export declare type ApiQueryGlobalUserInfoResponse = ApiResponse;
export interface ApiParseResponse {
    title: string;
    pageid: number;
    revid: number;
    text: string;
    langlinks: Array<{
        lang: string;
        url: string;
        langname: string;
        autonym: string;
        title: string;
    }>;
    categories: Array<{
        sortkey: string;
        category: string;
        hidden?: true;
    }>;
    links: Array<{
        ns: number;
        title: string;
        exists: boolean;
    }>;
    templates: Array<{
        ns: number;
        title: string;
        exists: boolean;
    }>;
    images: string[];
    externallinks: string[];
    sections: Array<{
        toclevel: number;
        level: string;
        line: string;
        number: string;
        index: string;
        fromtitle: string;
        byteoffset: number;
        anchor: string;
    }>;
    parsewarnings: Array<any>;
    displaytitle: string;
    iwlinks: Array<{
        prefix: string;
        url: string;
        title: string;
    }>;
    properties: {
        notoc: '';
        noindex: '';
        [name: string]: string;
    };
}
export declare type ApiSearchResult = {
    ns: number;
    title: string;
    pageid: number;
    size: number;
    wordcount: number;
    snippet: string;
    timestamp: string;
    isfilematch: boolean;
    titlesnippet: string;
    categorysnippet: string;
    sectionsnippet?: string;
    redirecttitle?: string;
    redirectsnippet?: string;
};
export declare type UserContribution = {
    userid: number;
    user: string;
    pageid: number;
    revid: number;
    parentid: number;
    ns: number;
    title: string;
    timestamp: string;
    new: boolean;
    minor: boolean;
    top: boolean;
    comment: string;
    size: number;
};
export declare type LogEvent = {
    logid: number;
    ns: number;
    title: string;
    pageid: number;
    logpage: number;
    params: any;
    type: string;
    action: string;
    user: string;
    timestamp: string;
    comment: string;
};
export interface ApiPage {
    pageid: number;
    ns: number;
    title: string;
    missing?: true;
    invalid?: true;
    revisions?: ApiRevision[];
}
export interface ApiRevision extends ApiRevisionSlot {
    revid?: number;
    parentid?: number;
    minor?: boolean;
    userhidden?: true;
    anon?: true;
    user?: string;
    userid?: number;
    timestamp?: string;
    roles?: string[];
    commenthidden?: true;
    comment?: string;
    parsedcomment?: string;
    slots?: {
        main: ApiRevisionSlot;
        [slotname: string]: ApiRevisionSlot;
    };
}
export interface ApiRevisionSlot {
    size?: number;
    sha1?: string;
    contentmodel?: string;
    contentformat?: string;
    content?: string;
}
